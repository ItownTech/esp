/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.4 at Tue Dec 03 22:54:23 2019. */

#ifndef PB_CONFIG_PB_H_INCLUDED
#define PB_CONFIG_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _ConfigMessage {
    char wifi_ssid[20];
    char wifi_pass[30];
    bool dhcp_static;
    char dhcp_ip[15];
    char dhcp_sn[15];
    char dhcp_gw[15];
    int16_t http_port;
    char http_user[15];
    char http_pass[15];
    char ota_url[150];
    char mqtt_server[30];
    int16_t mqtt_port;
    char mqtt_user[20];
    char mqtt_pass[30];
    bool mqtt_retain;
    char mqtt_topic[50];
    bool mqtt_discovery;
    char mqtt_discovery_prefix[30];
    int8_t debug_type;
    char debug_server[40];
    int16_t debug_port;
    int8_t module_type;
    int8_t relay_led_type;
    int16_t relay_led_start;
    int16_t relay_led_end;
    int8_t relay_power_on_state;
    bool relay_last_state[4];
    int32_t relay_study_index[4];
    int32_t relay_study[40];
    int8_t relay_led_light;
    int8_t relay_led_time;
    int8_t cover_position;
    int8_t cover_direction;
    int8_t cover_hand_pull;
    int8_t cover_weak_switch;
    int8_t cover_power_switch;
    bool zinguo_dual_motor;
    bool zinguo_dual_warm;
    int8_t zinguo_delay_blow;
    int8_t zinguo_linkage;
    int8_t zinguo_max_temp;
    int8_t zinguo_close_warm;
    int8_t zinguo_close_ventilation;
    bool zinguo_beep;
    bool zinguo_reverse_led;
/* @@protoc_insertion_point(struct:ConfigMessage) */
} ConfigMessage;

/* Struct field encoding specification for nanopb */
extern const pb_field_t ConfigMessage_fields[46];

/* Maximum encoded size of messages (where known) */
#define ConfigMessage_size                       1324

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define CONFIG_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
